@page "/LoginAwam"

<PageTitle>Login e-Takaf</PageTitle>

@using CurrieTechnologies.Razor.SweetAlert2
@using DAL.Entiti
@using IdentityAuthentication
@using Microsoft.AspNetCore.Mvc
@using SAL
@using eTakaf2025.Components.Layout

@inject IIdentityAuthenticationLib myIden
@inject IJSRuntime JSRuntime
@layout EmptyLayout
@inject IServices _service
@inject SweetAlertService Swal
@inject IConfiguration _conf
@inject NavigationManager NavMan


<div class="row justify-content-center align-items-center min-vh-100">
    <div class="col-12 col-md-8 col-lg-5">
                <div class="login-card p-4 p-md-5">
                    <div class="text-center mb-4">
                        <h1 class="login-header mb-4 fw-bold">e-TAKAF</h1>
                        <h6>PORTAL CARIAN MAKLUMAT TANAH WAKAF NEGERI SEMBILAN</h6>
                        <h6>MAJLIS AGAMA ISLAM NEGERI SEMBILAN (MAINS)</h6>
                    </div>
                              
                    <EditForm Model="@modelDB" FormName="FirstMasukLog" OnValidSubmit="LoginRecord">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                   
                            <div class="form-floating mb-3">
                                 <InputText type="text" class="form-control fw-bold" @bind-Value="modelDB.UserId" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0,12)" maxlength="14" id="userId" placeholder="No. Kad Pengenalan" required />
                                <label for="userId"><i class="bi bi-person me-2"></i></label>
                                <div class="invalid-feedback">
                                    Masukkan No. Kad Pengenalan Anda
                                </div>
                            </div>

                            <div class="form-floating mb-3">
                            <InputText type="password" class="form-control fw-bold" @bind-Value="modelDB.Password" id="password" placeholder="Katalaluan" required minlength="6"/>
                                <label for="password"><i class="bi bi-lock me-2"></i></label>
                                <div class="invalid-feedback">
                                    Katalaluan tidak memenuhi spesifikasi
                                </div>
                            </div>
                            <div class="text-center justify-content-center">
                                @if (isError)
                                {
                                    <p class="text-danger fw-bold">@alertMessage</p>
                                }
                            </div>
                            <button type="submit" class="btn btn-primary w-100 mb-3">
                                <i class="fa-light fa-right-to-bracket pe-2"></i>Login
                            </button>

                    </EditForm>
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <a href="LupaKatalaluan" class="text-decoration-none fw-bold">Lupa katalaluan?</a>
                            <a href="PendaftaranId" class="text-decoration-none fw-bold">Akaun Baru</a>                           
                        </div>
                        <div class="d-flex justify-content-center align-items-center">
                            <a href="" class="text-decoration-none fw-bold">Home</a>
                        </div>
                </div>
            </div>
        </div>


<style type="text/css">
    body {
            
            background-image: url('../Images/tanah_kubur.jpg'); /* Replace with your image path */
            background-size: cover; /* Ensures the image covers the whole screen */
            background-position: center; /* Centers the image */
            background-repeat: no-repeat; /* Prevents repetition */
            min-height: 100vh; /* Ensures full viewport coverage */
        min-height: 100vh;
        align-items: center;
       /*  display: flex; */
       
        /*justify-content: center; */
    }

    .login-card {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: 1rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.18);
        transition: all 0.3s ease;
    }

        .login-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.25);
        }

    .form-control {
        border-radius: 0.75rem;
        padding: 0.75rem 1.25rem;
        border: 1px solid #e0e0e0;
        background-color: #f8f9fa;
        transition: all 0.3s;
    }

        .form-control:focus {
            border-color: #6a11cb;
            box-shadow: 0 0 0 0.25rem rgba(106, 17, 203, 0.25);
        }

    .form-floating > label {
        padding: 0.75rem 1.25rem;
    }

    .btn-primary {
        background: linear-gradient(to right, #6a11cb, #2575fc);
        border: none;
        border-radius: 0.75rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: all 0.3s;
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(106, 17, 203, 0.4);
        }

        .btn-primary:active {
            transform: translateY(0);
        }

    .login-header {
        position: relative;
    }

        .login-header::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 3px;
            background: linear-gradient(to right, #6a11cb, #2575fc);
            border-radius: 3px;
        }

    .form-check-input:checked {
        background-color: #6a11cb;
        border-color: #6a11cb;
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .social-login {
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    .social-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        transition: all 0.3s;
    }

        .social-btn:hover {
            transform: translateY(-3px);
        }

    .facebook {
        background-color: #3b5998;
    }

    .google {
        background-color: #db4437;
    }

    .twitter {
        background-color: #1da1f2;
    }

    .divider {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 1.5rem 0;
    }

        .divider::before,
        .divider::after {
            content: '';
            flex: 1;
            border-bottom: 1px solid #e0e0e0;
        }

        .divider span {
            padding: 0 1rem;
            color: #6c757d;
            font-size: 0.9rem;
        }
</style>

@code {
    [SupplyParameterFromForm]
    public LoginModel modelDB { get; set; } = new LoginModel()
        {
            UserId = "750726075267",
            Password = "Password@2025"
        };


    public bool isError = false;
    public string NoKP = string.Empty;
    public string NamaPemohon = string.Empty;
    public string Emel = string.Empty;
    public string NoHP = string.Empty;
    public string KataLaluan = string.Empty;
    public string KataLaluan1 = string.Empty;
    public string NoKaP = string.Empty;
    public string alertMessage = string.Empty;
    public string Mode = string.Empty;
    // public bool adaError = false;

private void OnUserIdInput(ChangeEventArgs e)
{
    var input = e.Value?.ToString() ?? "";
    // Keep only digits and limit to 12 characters
    var cleaned = new string(input.Where(char.IsDigit).ToArray())
                            .Substring(0, Math.Min(12, input.Length));
    modelDB.UserId = cleaned;

    // Clear error alert
    isError = false;
    alertMessage = string.Empty;
}
    protected override async Task OnInitializedAsync()
    {
        Mode = _conf["Mode"] ?? "";
    }

    private async Task LoadFile()
    {
        await JSRuntime.InvokeVoidAsync("loadSweetAlert");
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await LoadFile();
    //     }
    // }

    [ValidateAntiForgeryToken]
    private async Task LoginRecord(EditContext context)
    {
        if (context.Validate())
        {
            if (modelDB.UserId == "sysadmin1" && modelDB.Password == "@Pwd@2025e")
            {
                await myIden.SignInUserAsync("Admin", "Admin", modelDB.UserId, "Admin");
                string baseUrl = (Mode == "Dev") ? "/MainPageAdmin" : "/e-Takaf/MainPageAdmin";
                NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true);
            }

            var data = await _service.GetLoginInfo(modelDB.UserId);
            if (data.Any())
            {
                var _result = data.FirstOrDefault();
                var currPassword = modelDB.Password;
                bool isMatch = BCrypt.Net.BCrypt.EnhancedVerify("N$r75**" + currPassword, _result?.Katalaluan ?? "");
                if (isMatch)
                {                    
                    await myIden.SignInUserAsync(modelDB.UserId, modelDB.UserId, "user", "user");
                    string baseUrl = (Mode == "Dev") ? "/Dashboard" : "/e-Takaf/Dashboard";
                    NavMan.NavigateTo(NavMan.ToAbsoluteUri(baseUrl).ToString(), true); StateHasChanged();
                }
                else
                {
                    isError = true; StateHasChanged();
                    modelDB.UserId = string.Empty; modelDB.Password = string.Empty;
                    alertMessage = "Tiada id pengguna dan katalaluan yang sah atau tiada rekod dijumpai";
                    StateHasChanged();
                }
            }
            else
            {
                isError = true;
                modelDB.UserId = string.Empty;modelDB.Password = string.Empty;
                alertMessage = "Tiada id pengguna dan katalaluan yang sah atau tiada rekod dijumpai";
                StateHasChanged();

            }
        }
    }



}
